import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { ExternalLink, Calendar, AlertTriangle } from 'lucide-react';
import { cn } from '@/lib/utils';

interface VulnerabilityCardProps {
  cve: string;
  title: string;
  severity: 'Critical' | 'High' | 'Medium' | 'Low';
  score?: number;
  publishedDate: string;
  status: string;
  source: string;
  description?: string;
}

const getSeverityColor = (severity: string) => {
  switch (severity.toLowerCase()) {
    case 'critical':
      return 'bg-severity-critical text-white';
    case 'high':
      return 'bg-severity-high text-white';
    case 'medium':
      return 'bg-severity-medium text-black';
    case 'low':
      return 'bg-severity-low text-white';
    default:
      return 'bg-muted text-muted-foreground';
  }
};

const getSeverityIcon = (severity: string) => {
  const iconClass = "h-4 w-4";
  return <AlertTriangle className={iconClass} />;
};

export const VulnerabilityCard = ({
  cve,
  title,
  severity,
  score,
  publishedDate,
  status,
  source,
  description
}: VulnerabilityCardProps) => {
  return (
    <Card className="p-6 hover:shadow-glow transition-all duration-300 border-border bg-card">
      <div className="flex items-start justify-between mb-4">
        <div className="flex items-center space-x-3">
          <Badge className={cn("flex items-center space-x-1", getSeverityColor(severity))}>
            {getSeverityIcon(severity)}
            <span>{severity}</span>
          </Badge>
          {score && (
            <Badge variant="outline" className="text-foreground border-border">
              CVSS: {score}
            </Badge>
          )}
        </div>
        <ExternalLink className="h-4 w-4 text-muted-foreground hover:text-primary cursor-pointer" />
      </div>

      <div className="space-y-3">
        <div>
          <h3 className="text-lg font-semibold text-foreground mb-1">{cve}</h3>
          <p className="text-sm text-foreground">{title}</p>
        </div>

        {description && (
          <p className="text-sm text-muted-foreground line-clamp-3">{description}</p>
        )}

        <div className="flex items-center justify-between text-xs text-muted-foreground">
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-1">
              <Calendar className="h-3 w-3" />
              <span>{new Date(publishedDate).toLocaleDateString()}</span>
            </div>
            <span>Source: {source}</span>
          </div>
          <Badge variant="outline" className="text-xs">
            {status}
          </Badge>
        </div>
      </div>
    </Card>
  );
};